"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[613],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,m=d["".concat(s,".").concat(u)]||d[u]||g[u]||i;return n?a.createElement(m,r(r({ref:t},p),{},{components:n})):a.createElement(m,r({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5409:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],l={sidebar_position:5},s="Logger CLI - Experimental",c={unversionedId:"advanced/logger_cli",id:"advanced/logger_cli",isDocsHomePage:!1,title:"Logger CLI - Experimental",description:"Since this library was built to compose my personal stack, I extended the original Logger into the LoggerCLI, that's intended to be used by my CLI tools. You can find this at the loggerCLI package, inside the root package. This is just an experimental feature, so it can be removed in future versions.",source:"@site/docs/advanced/logger_cli.md",sourceDirName:"advanced",slug:"/advanced/logger_cli",permalink:"/go-log/docs/advanced/logger_cli",editUrl:"https://github.com/mathbalduino/go-log/edit/main/docs/docs/advanced/logger_cli.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Error tokens",permalink:"/go-log/docs/advanced/error_tokens"}},p=[{value:"Creating a new LoggerCLI instance",id:"creating-a-new-loggercli-instance",children:[]},{value:"Creating a CLI tool with LoggerCLI",id:"creating-a-cli-tool-with-loggercli",children:[]}],g={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"logger-cli---experimental"},"Logger CLI - Experimental"),(0,i.kt)("p",null,"Since this library was built to compose my personal stack, I extended the original ",(0,i.kt)("inlineCode",{parentName:"p"},"Logger")," into the ",(0,i.kt)("inlineCode",{parentName:"p"},"LoggerCLI"),", that's intended to be used by my CLI tools. You can find this at the ",(0,i.kt)("inlineCode",{parentName:"p"},"loggerCLI")," package, inside the root package. This is just an experimental feature, so it can be removed in future versions."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"LoggerCLI")," logs can be nested, creating a tree-like structure, easing visualization. You can create an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"LoggerCLI")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"New")," function, inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"loggerCLI")," package."),(0,i.kt)("p",null,"Inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"loggerCLI")," package there's another package: ",(0,i.kt)("inlineCode",{parentName:"p"},"beautify"),". You can use this package to pretty-print a set of logs."),(0,i.kt)("p",null,"When using some CLI tool that uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"LoggerCLI"),", you can just pipe the output to the ",(0,i.kt)("inlineCode",{parentName:"p"},"beautify")," package:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"some-tool --json --some-flag some-file | go run PATH/TO/go-log/loggerCLI/beautify\n")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"beautify")," package expects to receive one log per line, parsed as a JSON object. Just remember to create and set a ",(0,i.kt)("inlineCode",{parentName:"p"},"--json")," flag, forwarding it to the ",(0,i.kt)("inlineCode",{parentName:"p"},"New")," function that creates the ",(0,i.kt)("inlineCode",{parentName:"p"},"LoggerCLI")," instance."))),(0,i.kt)("p",null,"This package is far from optimized, and expects that the output knows how to print ANSI codes (virtually any modern terminal knows how to do it). For details, see the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/mathbalduino/go-log"},"source code"),"."),(0,i.kt)("h2",{id:"creating-a-new-loggercli-instance"},"Creating a new LoggerCLI instance"),(0,i.kt)("p",null,"Using the ",(0,i.kt)("inlineCode",{parentName:"p"},"New")," function, at the package ",(0,i.kt)("inlineCode",{parentName:"p"},"loggerCLI"),", you can get a new ",(0,i.kt)("inlineCode",{parentName:"p"},"LoggerCLI")," instance. This constructor receives 3 booleans: "),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"json"),": Controls the output. If true, it will print one log per line, parsed as ",(0,i.kt)("inlineCode",{parentName:"li"},"json")," object"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"debug"),": Enables the ",(0,i.kt)("inlineCode",{parentName:"li"},"Debug")," log level"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"trace"),": Enabled the ",(0,i.kt)("inlineCode",{parentName:"li"},"Debug")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Trace")," log levels. If true, the ",(0,i.kt)("inlineCode",{parentName:"li"},"debug")," boolean will be ignored.")),(0,i.kt)("h2",{id:"creating-a-cli-tool-with-loggercli"},"Creating a CLI tool with LoggerCLI"),(0,i.kt)("p",null,"Logs created by the ",(0,i.kt)("inlineCode",{parentName:"p"},"LoggerCLI")," are intended to be nested, so, the API is built in a way that makes it possible. Every log level method will return another instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"LoggerCLI"),", that will nest it's own logs inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"LoggerCLI")," that created it. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'flags := cliFlags()\nlvl0 := loggerCLI.New(flags.json, flags.debug, flags.trace)\nlvl1 := lvl0.Info("Lvl 0")\nlvl2 := lvl1.Warn("Lvl 1")\nlvl0.Info("Lvl 1 - again")\nlvl2.Error("Lvl 2")\nlvl1.Warn("Lvl 1 - again")\n\n// Will output:\n//    [ INFO ] Lvl 0\n//    [ WARN ] Lvl 1\n//    [ INFO ] Lvl 0 - again\n//    [ ERROR ] Lvl 2\n//    [ WARN ] Lvl 1 - again\n\n// If forwarded to "beautify" (with "json" = true):\n//    [ INFO ] Lvl 0\n//    |--[ WARN ] Lvl 1\n//    |  \'--[ ERROR ] Lvl 2\n//    \'--[ WARN ] Lvl 1 - again\n//    [ INFO ] Lvl 0 - again\n')),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Don't forget that it's recommended to create, at least, one CLI Flag: ",(0,i.kt)("inlineCode",{parentName:"p"},"--json"),". The value of this flag should be forwarded to the ",(0,i.kt)("inlineCode",{parentName:"p"},"New")," function, easing the pipe of the output to the ",(0,i.kt)("inlineCode",{parentName:"p"},"beautify")," package. You can, of course, create flags to the ",(0,i.kt)("inlineCode",{parentName:"p"},"debug")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"trace")," flags too."))))}d.isMDXComponent=!0}}]);