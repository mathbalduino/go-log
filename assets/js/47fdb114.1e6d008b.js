"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[502],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,u=d["".concat(s,".").concat(m)]||d[m]||g[m]||i;return t?o.createElement(u,a(a({ref:n},c),{},{components:t})):o.createElement(u,a({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},951:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),a=["components"],l={sidebar_position:1},s="Loggers clonage",p={unversionedId:"advanced/loggers_clonage",id:"advanced/loggers_clonage",isDocsHomePage:!1,title:"Loggers clonage",description:"Every time you modify some information inside the Logger, a new instance will be created by cloning the old version into a new one.",source:"@site/docs/advanced/loggers_clonage.md",sourceDirName:"advanced",slug:"/advanced/loggers_clonage",permalink:"/go-log/docs/advanced/loggers_clonage",editUrl:"https://github.com/mathbalduino/go-log/edit/main/docs/docs/advanced/loggers_clonage.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/go-log/docs/basic-concepts/configuration"},next:{title:"Log creation",permalink:"/go-log/docs/advanced/log_creation"}},c=[],g={toc:c};function d(e){var n=e.components,t=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"loggers-clonage"},"Loggers clonage"),(0,i.kt)("p",null,"Every time you modify some information inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"Logger"),", a new instance will be created by cloning the old version into a new one."),(0,i.kt)("p",null,"This process can be expensive, depending on the size of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Logger")," being cloned. Because of this, it's recommended that you create all your ",(0,i.kt)("inlineCode",{parentName:"p"},"Loggers")," at startup time, not on-demand."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"Logger")," is represented using the following struct:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"// new.go\ntype Logger struct {\n    configuration *Configuration\n    fields        LogFields\n    preHooks      Hooks\n    postHooks     Hooks\n    outputs       []Output\n}\n")),(0,i.kt)("p",null,"To clone the ",(0,i.kt)("inlineCode",{parentName:"p"},"Logger")," instance, it's necessary to clone the ",(0,i.kt)("inlineCode",{parentName:"p"},"LogFields")," into another map, clone the ",(0,i.kt)("inlineCode",{parentName:"p"},"PreHooks")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"PostHooks")," into another map, and clone the ",(0,i.kt)("inlineCode",{parentName:"p"},"Outputs")," into another slice."),(0,i.kt)("p",null,"Note that the values are not cloned, just the ",(0,i.kt)("inlineCode",{parentName:"p"},"containers"),". If you have a field called ",(0,i.kt)("inlineCode",{parentName:"p"},"pointer")," that is a pointer to some ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),", for example, the cloned ",(0,i.kt)("inlineCode",{parentName:"p"},"LogFields")," will point to the same ",(0,i.kt)("inlineCode",{parentName:"p"},"int")," (the same to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hooks")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Outputs")," methods):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'myInt := 10\n\n// Field "pointer" points to "myInt"\nsomeLogger := logger.NewDefault().\n    Fields(logger.LogFields{"pointer": &myInt})\n\n// Clone "someLogger" using any method\nclone := someLogger.RawPreHooks(nil)\n\n// Now, both "someLogger" and "clone" have a field\n// called "pointer" that points to "myInt", but in\n// different maps\nfmt.Println(*someLogger.Field("pointer").(*int)) // 10\nfmt.Println(*clone.Field("pointer").(*int))      // 10\n\notherLogger := someLogger.Fields(logger.LogFields{"pointer": 5})\nfmt.Println(otherLogger.Field("pointer").(int)) // 5\nfmt.Println(*clone.Field("pointer").(*int))     // 10\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Configuration")," pointer is just copied to the new ",(0,i.kt)("inlineCode",{parentName:"p"},"Logger"),", without changing it, so all the following versions of some ",(0,i.kt)("inlineCode",{parentName:"p"},"Logger")," will share the same ",(0,i.kt)("inlineCode",{parentName:"p"},"Configuration"),". This way, you can configure your logging strategy in a more centralized way."),(0,i.kt)("p",{parentName:"div"},"If you still want new ",(0,i.kt)("inlineCode",{parentName:"p"},"Loggers")," to point to a different ",(0,i.kt)("inlineCode",{parentName:"p"},"Configuration"),", you can just create another instance using ",(0,i.kt)("inlineCode",{parentName:"p"},"logger.New()"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"logger.NewDefault()")))))}d.isMDXComponent=!0}}]);