"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[55],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=o.createContext({}),d=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=d(e.components);return o.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=d(t),m=a,u=g["".concat(s,".").concat(m)]||g[m]||p[m]||r;return t?o.createElement(u,i(i({ref:n},c),{},{components:t})):o.createElement(u,i({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<r;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1212:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return g}});var o=t(7462),a=t(3366),r=(t(7294),t(3905)),i=["components"],l={sidebar_position:3},s="PreHooks",d={unversionedId:"basic-concepts/pre_hooks",id:"basic-concepts/pre_hooks",isDocsHomePage:!1,title:"PreHooks",description:"You can customize the PreHooks of the Logger instance using the following methods:",source:"@site/docs/basic-concepts/pre_hooks.md",sourceDirName:"basic-concepts",slug:"/basic-concepts/pre_hooks",permalink:"/docs/basic-concepts/pre_hooks",editUrl:"https://github.com/mathbalduino/go-log/edit/main/docs/docs/basic-concepts/pre_hooks.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Base fields",permalink:"/docs/basic-concepts/base_fields"},next:{title:"AdHoc fields",permalink:"/docs/basic-concepts/adhoc_fields"}},c=[{value:"PreHooks method",id:"prehooks-method",children:[]},{value:"RawPreHooks method",id:"rawprehooks-method",children:[]},{value:"PreHooks querying PreHooks",id:"prehooks-querying-prehooks",children:[]}],p={toc:c};function g(e){var n=e.components,t=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"prehooks"},"PreHooks"),(0,r.kt)("p",null,"You can customize the ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHooks")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," instance using the following methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// hooks.go\nfunc (l *Logger) PreHooks(hooks Hooks) *Logger { ... }\nfunc (l *Logger) RawPreHooks(hooks Hooks) *Logger { ... }\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The returned ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," instance will be a copy of the previous one, sharing the same ",(0,r.kt)("inlineCode",{parentName:"p"},"Configuration")," struct. The only difference will be the ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHooks"),". "),(0,r.kt)("p",{parentName:"div"},"More info at the ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced/loggers_clonage"},"Loggers clonage")," page."))),(0,r.kt)("p",null,"As you may have seen in the introduction, ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHooks")," are executed at the ",(0,r.kt)("a",{parentName:"p",href:"/docs/basic-concepts/life_cycle#sync-phase-2-pre-handling"},"Second phase")," of the life cycle, right after the log creation."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Hooks")," are, essentially, just a function that will be called at log creation time and will return the value for some field, allowing you to create dynamic fields:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// hooks.go\n// Just an alias\ntype Hooks = map[string]func(Log) interface{}\n")),(0,r.kt)("p",null,"You may have noticed that ",(0,r.kt)("inlineCode",{parentName:"p"},"Hooks")," functions receive one argument of the type ",(0,r.kt)("inlineCode",{parentName:"p"},"Log"),". This type is a ",(0,r.kt)("inlineCode",{parentName:"p"},"struct")," used internally by the library to handle the log creation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"// handleLog.go\ntype Log struct {\n  ...\n}\nfunc (l Log) Field(key string) interface{} { ... }\n")),(0,r.kt)("p",null,"Using this ",(0,r.kt)("inlineCode",{parentName:"p"},"struct"),", you can query the fields of the created log using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Field")," method."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"It's important to distinguish between this method and the ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger.Field()")," method. They're ",(0,r.kt)("strong",{parentName:"p"},"not")," the same."))),(0,r.kt)("p",null,"This method will return the current value for some field, if it's evaluated at the time of the call. Don't expect to call this method inside ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHooks")," and get a value that will be evaluated just by some ",(0,r.kt)("inlineCode",{parentName:"p"},"PostHook"),", because they're not ready."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"It's not recommended that your ",(0,r.kt)("inlineCode",{parentName:"p"},"Hooks")," depend on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Configuration"),", because it can cause trouble when trying to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"Configuration")," dynamically. For details, see ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced/dynamic_config"},"Dynamic Configuration"),"."))),(0,r.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You have to be very carefull when writing ",(0,r.kt)("inlineCode",{parentName:"p"},"Hooks"),", because the library is not prepared to handle any kind of ",(0,r.kt)("inlineCode",{parentName:"p"},"panic")," that can occur inside them, and it can cause issues."))),(0,r.kt)("h2",{id:"prehooks-method"},"PreHooks method"),(0,r.kt)("p",null,"This method, as the ",(0,r.kt)("inlineCode",{parentName:"p"},"Fields"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"RawFields"),", will return a new copy of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," instance, with the given ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHooks")," applied. So, lets say you want to timestamp your logs every time they're created, you can create the following ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHook"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'someLogger := logger.NewDefault().\n  PreHooks(logger.Hooks{\n    "timestamp": func(_ logger.Log) interface{} { return time.Now().Second() },\n  })\nsomeLogger.Debug("some log")\n/*\n  {\n    "msg": "some log",\n    "lvl": 2,\n    "timestamp": 23464356\n  }\n*/\n')),(0,r.kt)("p",null,"This method will override any ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHook")," of the previous ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," instance with a ",(0,r.kt)("inlineCode",{parentName:"p"},"key")," that clashes with some of the new ones. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'firstLogger := logger.NewDefault().\n  PreHooks(logger.Hooks{\n    "field-A": func(_ logger.Log) interface{} { return "dynamic value-A" },\n    "field-B": func(_ logger.Log) interface{} { return "dynamic value-B" },\n    "field-C": func(_ logger.Log) interface{} { return "dynamic value-C" },\n  })\nfirstLogger.Trace("first log")\n/*\n  {\n    "msg": "first log",\n    "lvl": 1,\n    "field-A": "dynamic value-A",\n    "field-B": "dynamic value-B",\n    "field-C": "dynamic value-C"\n  }\n*/\n\nsecondLogger := firstLogger.\n  PreHooks(logger.Hooks{\n    "field-B": func(_ logger.Log) interface{} { return "new value" },\n  })\nsecondLogger.Info("second log")\n/*\n  {\n    "msg": "second log",\n    "lvl": 4,\n    "field-A": "dynamic value-A",\n    "field-B": "new value",\n    "field-C": "dynamic value-C"\n  }\n*/\n')),(0,r.kt)("h2",{id:"rawprehooks-method"},"RawPreHooks method"),(0,r.kt)("p",null,"If you want to reset the ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHooks")," you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"RawPreHooks")," method, that will set the ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHooks")," right away, ignoring any previous values (returning a new copy of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Logger")," instance, just like ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHooks"),"). Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'firstLogger := logger.NewDefault().\n  PreHooks(logger.Hooks{\n    "field-A": func(_ logger.Log) interface{} { return "dynamic value-A" },\n    "field-B": func(_ logger.Log) interface{} { return "dynamic value-B" },\n    "field-C": func(_ logger.Log) interface{} { return "dynamic value-C" },\n  })\nfirstLogger.Trace("first log")\n/*\n  {\n    "msg": "first log",\n    "lvl": 1,\n    "field-A": "dynamic value-A",\n    "field-B": "dynamic value-B",\n    "field-C": "dynamic value-C"\n  }\n*/\n\nsecondLogger := firstLogger.\n  RawPreHooks(logger.Hooks{\n    "field-B": func(_ logger.Log) interface{} { return "different" },\n  })\nsecondLogger.Info("second log")\n/*\n  {\n    "msg": "second log",\n    "lvl": 4,\n    "field-B": "different",\n  }\n*/\n')),(0,r.kt)("h2",{id:"prehooks-querying-prehooks"},"PreHooks querying PreHooks"),(0,r.kt)("p",null,"Don't use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Log.Field()")," method to query ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHook")," fields INSIDE a ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHook"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHooks")," are applied using an iteration over the ",(0,r.kt)("inlineCode",{parentName:"p"},"PreHooks")," map, and the order is not guaranteed (",(0,r.kt)("a",{parentName:"p",href:"https://golangdocs.com/golang-iterate-over-a-map"},"read more"),"). Don't do this ",(0,r.kt)("del",{parentName:"p"},"or do it"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'someLogger := logger.NewDefault().\n  PreHooks(logger.Hooks{\n    // Even if the "field-A" is defined BEFORE "field-A-plus5",\n    "field-A": func(l logger.Log) interface{} { return 10 },\n    \n    "field-A-plus5": func(l logger.Log) interface{} {\n      v := l.Field("field-A")\n      // "v" may be nil (maybe not), so this line may (maybe not) panic\n      return v.(int) + 5\n    },\n  })\n// when iterating/executing the PreHooks inside the following log creation\nsomeLogger.Trace("some log")\n')))}g.isMDXComponent=!0}}]);