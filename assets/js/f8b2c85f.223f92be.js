"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[995],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),g=d(t),m=a,u=g["".concat(s,".").concat(m)]||g[m]||p[m]||o;return t?i.createElement(u,l(l({ref:n},c),{},{components:t})):i.createElement(u,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=g;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var d=2;d<o;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},8596:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return g}});var i=t(7462),a=t(3366),o=(t(7294),t(3905)),l=["components"],r={sidebar_position:2},s="Base fields",d={unversionedId:"basic-concepts/base_fields",id:"basic-concepts/base_fields",isDocsHomePage:!1,title:"Base fields",description:"You can customize the Base Fields of the Logger instance using the following methods:",source:"@site/docs/basic-concepts/base_fields.md",sourceDirName:"basic-concepts",slug:"/basic-concepts/base_fields",permalink:"/go-log/docs/basic-concepts/base_fields",editUrl:"https://github.com/mathbalduino/go-log/edit/main/docs/docs/basic-concepts/base_fields.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Log fields",permalink:"/go-log/docs/basic-concepts/log_fields"},next:{title:"PreHooks",permalink:"/go-log/docs/basic-concepts/pre_hooks"}},c=[{value:"Fields method",id:"fields-method",children:[]},{value:"RawFields method",id:"rawfields-method",children:[]},{value:"Field method",id:"field-method",children:[]},{value:"Dynamic Fields",id:"dynamic-fields",children:[]}],p={toc:c};function g(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"base-fields"},"Base fields"),(0,o.kt)("p",null,"You can customize the ",(0,o.kt)("inlineCode",{parentName:"p"},"Base Fields")," of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Logger")," instance using the following methods:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"// fields.go\nfunc (l *Logger) Fields(fields LogFields) *Logger { ... }\nfunc (l *Logger) RawFields(fields LogFields) *Logger { ... }\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The returned ",(0,o.kt)("inlineCode",{parentName:"p"},"Logger")," instance will be a copy of the previous one, sharing the same ",(0,o.kt)("inlineCode",{parentName:"p"},"Configuration")," struct. The only difference will be the ",(0,o.kt)("inlineCode",{parentName:"p"},"Base Fields"),". "),(0,o.kt)("p",{parentName:"div"},"More info at the ",(0,o.kt)("a",{parentName:"p",href:"/go-log/docs/advanced/loggers_clonage"},"Loggers clonage")," page."))),(0,o.kt)("p",null,"There's a third method, used to query ",(0,o.kt)("inlineCode",{parentName:"p"},"Base Fields")," of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Logger")," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"// fields.go\nfunc (l *Logger) Field(key string) interface{} { ... }\n")),(0,o.kt)("h2",{id:"fields-method"},"Fields method"),(0,o.kt)("p",null,"This method will return a new copy of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Logger")," instance, with the given ",(0,o.kt)("inlineCode",{parentName:"p"},"LogFields")," applied. Note that if the previous ",(0,o.kt)("inlineCode",{parentName:"p"},"Logger")," had a ",(0,o.kt)("inlineCode",{parentName:"p"},"Base Field")," with a key that clashes with one of the new ones, it will be overriden:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'firstLogger := logger.NewDefault().\n  Fields(logger.LogFields{\n    "field-A": "value-A",\n    "field-B": "value-B",\n    "field-C": "value-C",\n  })\nfirstLogger.Trace("first log")\n/*\n  {\n    "msg": "first log",\n    "lvl": 1,\n    "field-A": "value-A",\n    "field-B": "value-B",\n    "field-C": "value-C"\n  }\n*/\n\nsecondLogger := firstLogger.\n  Fields(logger.LogFields{\n    "field-B": "new value",\n  })\nsecondLogger.Info("second log")\n/*\n  {\n    "msg": "second log",\n    "lvl": 4,\n    "field-A": "value-A",\n    "field-B": "new value",\n    "field-C": "value-C"\n  }\n*/\n')),(0,o.kt)("h2",{id:"rawfields-method"},"RawFields method"),(0,o.kt)("p",null,"This method is almost equal to the previous one (returns a new copy of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Logger")," instance too), with one difference: the given ",(0,o.kt)("inlineCode",{parentName:"p"},"LogFields")," will be set right away, ignoring any previous ",(0,o.kt)("inlineCode",{parentName:"p"},"Base Fields"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'firstLogger := logger.NewDefault().\n  Fields(logger.LogFields{\n    "field-A": "value-A",\n    "field-B": "value-B",\n    "field-C": "value-C",\n  })\nfirstLogger.Trace("first log")\n/*\n  {\n    "msg": "first log",\n    "lvl": 1,\n    "field-A": "value-A",\n    "field-B": "value-B",\n    "field-C": "value-C"\n  }\n*/\n\nsecondLogger := firstLogger.\n  RawFields(logger.LogFields{\n    "field-B": "new value",\n  })\nsecondLogger.Info("second log")\n/*\n  {\n    "msg": "second log",\n    "lvl": 4,\n    "field-B": "new value",\n  }\n*/\n')),(0,o.kt)("h2",{id:"field-method"},"Field method"),(0,o.kt)("p",null,"This helper method can be used to retrieve the values of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Base fields")," (and just ",(0,o.kt)("inlineCode",{parentName:"p"},"Base fields"),"):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'someLogger := logger.NewDefault().\n  Fields(logger.LogFields{\n    "field": "value",\n  })\nv := someLogger.Field("field")\nfmt.Println(v)\n// "value"\n')),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"It's impossible to query ",(0,o.kt)("inlineCode",{parentName:"p"},"PreHooks"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"AdHoc fields")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"PostHooks")," directly from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Logger"),", because they're not ready yet."))),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"You can use this method to create more complex rules when cloning ",(0,o.kt)("inlineCode",{parentName:"p"},"Loggers"),". See the implementation of ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/mathbalduino/go-log"},"LoggerCLI")," for a concrete example."))),(0,o.kt)("h2",{id:"dynamic-fields"},"Dynamic Fields"),(0,o.kt)("p",null,"You may have noticed that if you need to calculate the value of some field every time a new log is created (think about calculating the timestamp of your logs, for example), the ",(0,o.kt)("inlineCode",{parentName:"p"},"Base Fields")," are useless, since the ",(0,o.kt)("inlineCode",{parentName:"p"},"Fields"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"RawFields")," methods can only set fields with constant values."),(0,o.kt)("p",null,"To set dynamic fields, you will need to use ",(0,o.kt)("inlineCode",{parentName:"p"},"Hooks"),". They will be discussed in the following pages."))}g.isMDXComponent=!0}}]);