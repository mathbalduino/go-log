"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[947],{3905:function(e,o,n){n.d(o,{Zo:function(){return p},kt:function(){return u}});var t=n(7294);function r(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function a(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?a(Object(n),!0).forEach((function(o){r(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function s(e,o){if(null==e)return{};var n,t,r=function(e,o){if(null==e)return{};var n,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],o.indexOf(n)>=0||(r[n]=e[n]);return r}(e,o);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),c=function(e){var o=t.useContext(l),n=o;return e&&(n="function"==typeof e?e(o):i(i({},o),e)),n},p=function(e){var o=c(e.components);return t.createElement(l.Provider,{value:o},e.children)},d={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},g=t.forwardRef((function(e,o){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),g=c(n),u=r,m=g["".concat(l,".").concat(u)]||g[u]||d[u]||a;return n?t.createElement(m,i(i({ref:o},p),{},{components:n})):t.createElement(m,i({ref:o},p))}));function u(e,o){var n=arguments,r=o&&o.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=g;var s={};for(var l in o)hasOwnProperty.call(o,l)&&(s[l]=o[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"},431:function(e,o,n){n.r(o),n.d(o,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return g}});var t=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],s={sidebar_position:5},l="PostHooks",c={unversionedId:"basic-concepts/post_hooks",id:"basic-concepts/post_hooks",isDocsHomePage:!1,title:"PostHooks",description:"You can customize the PostHooks of the Logger instance using the following methods:",source:"@site/docs/basic-concepts/post_hooks.md",sourceDirName:"basic-concepts",slug:"/basic-concepts/post_hooks",permalink:"/go-log/docs/basic-concepts/post_hooks",editUrl:"https://github.com/mathbalduino/go-log/edit/docs/docs/basic-concepts/post_hooks.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"AdHoc fields",permalink:"/go-log/docs/basic-concepts/adhoc_fields"},next:{title:"Fields override order",permalink:"/go-log/docs/basic-concepts/override_order"}},p=[{value:"PostHooks method",id:"posthooks-method",children:[]},{value:"RawPostHooks method",id:"rawposthooks-method",children:[]},{value:"PostHooks querying PostHooks",id:"posthooks-querying-posthooks",children:[]}],d={toc:p};function g(e){var o=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},d,n,{components:o,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"posthooks"},"PostHooks"),(0,a.kt)("p",null,"You can customize the ",(0,a.kt)("inlineCode",{parentName:"p"},"PostHooks")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," instance using the following methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"// hooks.go\nfunc PostHooks(hooks Hooks) *Logger { ... }\nfunc RawPostHooks(hooks Hooks) *Logger { ... }\n")),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"The returned ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," instance will be a copy of the previous one, sharing the same ",(0,a.kt)("inlineCode",{parentName:"p"},"Configuration")," struct. The only difference will be the ",(0,a.kt)("inlineCode",{parentName:"p"},"PostHooks"),". "),(0,a.kt)("p",{parentName:"div"},"More info at the ",(0,a.kt)("a",{parentName:"p",href:"/go-log/docs/advanced/loggers_clonage"},"Loggers clonage")," page."))),(0,a.kt)("p",null,"As you may have seen, ",(0,a.kt)("inlineCode",{parentName:"p"},"PostHooks")," will be executed at the ",(0,a.kt)("a",{parentName:"p",href:"/go-log/docs/basic-concepts/life_cycle#async-phase-3-post-handling"},"Thirty phase")," of the life cycle, right after the ",(0,a.kt)("inlineCode",{parentName:"p"},"AdHoc fields")," are applied."),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("inlineCode",{parentName:"p"},"PostHooks")," share the same characteristics as the ",(0,a.kt)("inlineCode",{parentName:"p"},"PreHooks"),": just a function that receive a ",(0,a.kt)("inlineCode",{parentName:"p"},"Log")," struct and returns the field value. "),(0,a.kt)("p",{parentName:"div"},"Read the introduction in the ",(0,a.kt)("a",{parentName:"p",href:"/go-log/docs/basic-concepts/pre_hooks"},"PreHooks")," page for details."))),(0,a.kt)("p",null,"The advantage of ",(0,a.kt)("inlineCode",{parentName:"p"},"PostHooks")," is that since they're being applied ",(0,a.kt)("strong",{parentName:"p"},"after")," the ",(0,a.kt)("inlineCode",{parentName:"p"},"Base fields"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"PreHooks")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AdHoc fields"),", you can query more fields using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Log.Field")," method from the hook argument:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'someLogger := logger.New(logger.DefaultConfig()).\n  Fields(logger.LogFields{\n    "base-field": 10,\n  }).\n  PreHooks(logger.Hooks{\n    "preHook": func(l logger.Log) interface{} {\n      return l.Field("base-field").(int) + 10\n    },\n  }).\n  PostHooks(logger.Hooks{\n    "postHook": func(l logger.Log) interface{} {\n      // Querying the adHoc field that will be defined at log creation time\n      return l.Field("preHook").(int) + l.Field("adHoc-field").(int)\n    },\n  }).\n  Outputs(logger.OutputJsonToWriter(os.Stdout, nil))\nsomeLogger.Debug("some log", logger.LogFields{\n  "adHoc-field": 5,\n})\n/*\n  {\n    "msg": "some log",\n    "lvl": 2,\n    "base-field": 10,\n    "preHook": 20,\n    "adHoc-field": 5,\n    "postHook": 25,\n  }\n*/\n')),(0,a.kt)("h2",{id:"posthooks-method"},"PostHooks method"),(0,a.kt)("p",null,"Similar to the ",(0,a.kt)("a",{parentName:"p",href:"/go-log/docs/basic-concepts/pre_hooks#prehooks-method"},"PreHooks method"),", this method will return a new copy of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," instance with the given ",(0,a.kt)("inlineCode",{parentName:"p"},"PostHooks")," applied, overriding previous ",(0,a.kt)("inlineCode",{parentName:"p"},"PostHooks")," with the same ",(0,a.kt)("inlineCode",{parentName:"p"},"key"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'firstLogger := logger.New(logger.DefaultConfig()).\n  PostHooks(logger.Hooks{\n    "field-A": func(_ logger.Log) interface{} { return "dynamic value-A" },\n    "field-B": func(_ logger.Log) interface{} { return "dynamic value-B" },\n    "field-C": func(_ logger.Log) interface{} { return "dynamic value-C" },\n  }).\n  Outputs(logger.OutputJsonToWriter(os.Stdout, nil))\nfirstLogger.Info("first log")\n/*\n  {\n    "msg": "first log",\n    "lvl": 4,\n    "field-A": "dynamic value-A",\n    "field-B": "dynamic value-B",\n    "field-C": "dynamic value-C"\n  }\n*/\n\nsecondLogger := firstLogger.\n  PostHooks(logger.Hooks{\n    "field-B": func(_ logger.Log) interface{} { return "new value" },\n  })\nsecondLogger.Info("second log")\n/*\n  {\n    "msg": "second log",\n    "lvl": 4,\n    "field-A": "dynamic value-A",\n    "field-B": "new value",\n    "field-C": "dynamic value-C"\n  }\n*/\n')),(0,a.kt)("h2",{id:"rawposthooks-method"},"RawPostHooks method"),(0,a.kt)("p",null,"If you want to reset the ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," ",(0,a.kt)("inlineCode",{parentName:"p"},"PostHooks")," you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"RawPostHooks")," method, that will set the ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," ",(0,a.kt)("inlineCode",{parentName:"p"},"PostHooks")," right away, ignoring any previous values (returning a new copy of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," instance, just like ",(0,a.kt)("inlineCode",{parentName:"p"},"PostHooks"),"). Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'firstLogger := logger.New(logger.DefaultConfig()).\n  PostHooks(logger.Hooks{\n    "field-A": func(_ logger.Log) interface{} { return "dynamic value-A" },\n    "field-B": func(_ logger.Log) interface{} { return "dynamic value-B" },\n    "field-C": func(_ logger.Log) interface{} { return "dynamic value-C" },\n  }).\n  Outputs(logger.OutputJsonToWriter(os.Stdout, nil))\nfirstLogger.Info("first log")\n/*\n  {\n    "msg": "first log",\n    "lvl": 4,\n    "field-A": "dynamic value-A",\n    "field-B": "dynamic value-B",\n    "field-C": "dynamic value-C"\n  }\n*/\n\nsecondLogger := firstLogger.\n  RawPostHooks(logger.Hooks{\n    "field-B": func(_ logger.Log) interface{} { return "value" },\n  })\nsecondLogger.Info("second log")\n/*\n  {\n    "msg": "second log",\n    "lvl": 4,\n    "field-B": "value",\n  }\n*/\n')),(0,a.kt)("h2",{id:"posthooks-querying-posthooks"},"PostHooks querying PostHooks"),(0,a.kt)("p",null,"Note that if you try to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Log.Field()")," method inside a ",(0,a.kt)("inlineCode",{parentName:"p"},"PostHook")," to get query some ",(0,a.kt)("inlineCode",{parentName:"p"},"PostHook")," field, you will fall into the same (possible) bug that was discussed when a ",(0,a.kt)("inlineCode",{parentName:"p"},"PreHook")," query another ",(0,a.kt)("inlineCode",{parentName:"p"},"PreHook")," field (",(0,a.kt)("a",{parentName:"p",href:"pre_hooks#prehooks-querying-prehooks"},"here"),"). ",(0,a.kt)("strong",{parentName:"p"},"Pay attention"),"."))}g.isMDXComponent=!0}}]);