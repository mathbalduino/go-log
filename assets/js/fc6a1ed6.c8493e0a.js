"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[867],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),g=o,m=u["".concat(s,".").concat(g)]||u[g]||p[g]||i;return n?r.createElement(m,a(a({ref:t},c),{},{components:n})):r.createElement(m,a({ref:t},c))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},383:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],l={sidebar_position:6},s="Fields override order",d={unversionedId:"basic-concepts/override_order",id:"basic-concepts/override_order",isDocsHomePage:!1,title:"Fields override order",description:"As you may have noticed, the log fields are constantly being overwritten. It's important that you understand the order in which all this operation is executed.",source:"@site/docs/basic-concepts/override_order.md",sourceDirName:"basic-concepts",slug:"/basic-concepts/override_order",permalink:"/go-log/docs/basic-concepts/override_order",editUrl:"https://github.com/mathbalduino/go-log/edit/main/docs/docs/basic-concepts/override_order.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"PostHooks",permalink:"/go-log/docs/basic-concepts/post_hooks"},next:{title:"Outputs",permalink:"/go-log/docs/basic-concepts/outputs"}},c=[],p={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"fields-override-order"},"Fields override order"),(0,i.kt)("p",null,"As you may have noticed, the log fields are constantly being overwritten. It's important that you understand the order in which all this operation is executed."),(0,i.kt)("p",null,"Everything starts at the ",(0,i.kt)("inlineCode",{parentName:"p"},"Base fields"),", go through ",(0,i.kt)("inlineCode",{parentName:"p"},"PreHooks"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"AdHoc fields")," and end at the ",(0,i.kt)("inlineCode",{parentName:"p"},"PostHooks"),":"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Base fields"),": gets overriden by everyone"),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"PreHooks"),": override ",(0,i.kt)("inlineCode",{parentName:"li"},"Base fields"),", gets overriden by ",(0,i.kt)("inlineCode",{parentName:"li"},"AdHocs")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"PostHooks")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"AdHoc fields"),": override ",(0,i.kt)("inlineCode",{parentName:"li"},"Base fields")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"PreHooks"),", gets overriden by ",(0,i.kt)("inlineCode",{parentName:"li"},"PostHooks")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"PostHooks"),": overrides everyone")),(0,i.kt)("p",null,"It means that if you define some field using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Fields")," method, it will be overriden by fields defined by the ",(0,i.kt)("inlineCode",{parentName:"p"},"PreHooks")," method, if they have the same key. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'someLogger := logger.NewDefault().\n  Fields(logger.LogFields{\n    "lvl": "Trying to override the \'lvl\' field",\n    "msg": "Trying to override the \'msg\' field",\n    "base-field": 1,\n    "preHook": 1,\n    "adhoc-field": 1,\n    "postHook": 1,\n  }).\n  PreHooks(logger.Hooks{\n    "lvl": func(l logger.Log) interface{} { return "Trying to override the \'lvl\' field (2)" }\n    "msg": func(l logger.Log) interface{} { return "Trying to override the \'msg\' field (2)" }\n    "preHook": func(l logger.Log) interface{} { return 2 },\n    "adhoc-field": func(l logger.Log) interface{} { return 2 },\n    "postHook": func(l logger.Log) interface{} { return 2 },\n  }).\n  PostHooks(logger.Hooks{\n    "lvl": func(l logger.Log) interface{} { return "Trying to override the \'lvl\' field (4)" }\n    "msg": func(l logger.Log) interface{} { return "Trying to override the \'msg\' field (4)" }\n    "postHook": func(l logger.Log) interface{} { return 4 },\n  })\nsomeLogger.Debug("some log", logger.LogFields{\n  "lvl": "Trying to override the \'lvl\' field (3)",\n  "msg": "Trying to override the \'msg\' field (3)",\n  "adHoc-field": 3,\n  "postHook": 3,\n})\n/*\n  {\n    "msg": "some log",\n    "lvl": 2,\n    "base-field": 1,\n    "preHook": 2,\n    "adHoc-field": 3,\n    "postHook": 4,\n  }\n*/\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"lvl")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"msg")," fields will be the last to be applied, overriding everyone else. You cannot change this behaviour"))))}u.isMDXComponent=!0}}]);